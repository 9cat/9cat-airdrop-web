{"version":3,"sources":["App.tsx","assets/airdrop-mini.png","assets/success-mini.png","const/index.ts","reportWebVitals.ts","index.tsx"],"names":["aWSBAirDropContract","aWSBTokenContract","ethereum","window","ethersProvider","ethers","providers","Web3Provider","signer","getSigner","init","a","Contract","aWSBAirDropABI","EIP20","connect","formatAddress","address","substr","length","Loaing","style","transform","className","Claiming","options","animationData","ClaimingAnimation","loop","autoplay","View","useLottie","App","useState","setAddress","expiredTime","setExpiredTime","claimBalance","setClaimBalance","errorNetWork","setErrorNetWork","aWSBTokenBalance","setaWSBTokenBalance","isMetaMaskConnected","setIsMetaMaskConnected","claiming","setClaiming","claimSuccess","setClaimSuccess","connecting","setConnecting","useEffect","chainId","getNetwork","console","log","getNetWork","Promise","resolve","setTimeout","Boolean","selectedAddress","getAccount","on","accounts","getAirdropInfos","request","method","walletAccounts","balanceOf","claimExpiredAt","claimWhitelist","toNumber","div","toString","connectWallet","claimButtonDisabled","Number","claim","process","wait","src","success","airdrop","alt","fontWeight","marginLeft","background","String","dayjs","format","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cd90835.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport dayjs from \"dayjs\";\nimport { useLottie } from \"lottie-react\";\nimport ClaimingAnimation from \"./assets/ClaimingAnimation.json\";\nimport { aWSBAirDropABI } from \"./ABI/airdrop.json\";\nimport { EIP20 } from \"./ABI/eip-20.json\";\nimport {\n  BSC_TESTNET_ID,\n  AWSB_TOKEN_ADDRESS,\n  AWSB_AIRDROP_CONTRACT_ADDRESS,\n} from \"./const\";\nimport airdrop from \"./assets/airdrop-mini.png\";\nimport success from \"./assets/success-mini.png\";\nimport \"./App.less\";\nimport { Fragment } from \"react\";\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nconst ethereum = window.ethereum;\nlet aWSBAirDropContract: ethers.Contract;\nlet aWSBTokenContract: ethers.Contract;\nconst aWSBTokenAddress = AWSB_TOKEN_ADDRESS;\nconst aWSBAirDropContractAddress = AWSB_AIRDROP_CONTRACT_ADDRESS;\nconst ethersProvider = new ethers.providers.Web3Provider(\n  window.ethereum,\n  \"any\"\n);\n\nconst signer = ethersProvider.getSigner();\n\nconst init = async () => {\n  aWSBAirDropContract = new ethers.Contract(\n    aWSBAirDropContractAddress,\n    aWSBAirDropABI,\n    ethersProvider\n  );\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  aWSBTokenContract = new ethers.Contract(aWSBTokenAddress, EIP20);\n  aWSBTokenContract = aWSBTokenContract.connect(signer);\n  aWSBAirDropContract = aWSBAirDropContract.connect(signer);\n};\n\nconst formatAddress = (address: string) => {\n  return address.substr(0, 8) + \"...\" + address.substr(address.length - 8, 8);\n};\n\nfunction Loaing() {\n  return (\n    <div style={{ transform: \"scale(0.45)\" }}>\n      <div className=\"lds-roller\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nfunction Claiming() {\n  const options = {\n    animationData: ClaimingAnimation,\n    loop: true,\n    autoplay: true,\n  };\n\n  const { View } = useLottie(options);\n\n  return <div className=\"claiming-animation\">{View}</div>;\n}\n\nfunction App() {\n  const [address, setAddress] = useState<string>(\"\");\n  const [expiredTime, setExpiredTime] = useState<number>(0);\n  const [claimBalance, setClaimBalance] = useState<number>(0);\n  const [errorNetWork, setErrorNetWork] = useState<boolean>(false);\n  const [aWSBTokenBalance, setaWSBTokenBalance] = useState<number>();\n  const [isMetaMaskConnected, setIsMetaMaskConnected] = useState<boolean>();\n  const [claiming, setClaiming] = useState<boolean>(false);\n  const [claimSuccess, setClaimSuccess] = useState<boolean>(false);\n  const [connecting, setConnecting] = useState<boolean>(true);\n\n  useEffect(() => {\n    let chainId: number;\n    const getNetWork = async () => {\n      chainId = (await ethersProvider.getNetwork()).chainId;\n      console.log(\n        \"üöÄ ~ file: App.tsx ~ line 96 ~ getNetWork ~ chainId\",\n        chainId\n      );\n      if (chainId !== BSC_TESTNET_ID) {\n        setErrorNetWork(true);\n        setAddress(\"\");\n      }\n    };\n    getNetWork();\n  }, []);\n\n  useEffect(() => {\n    setConnecting(true);\n    async function getAccount() {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      setIsMetaMaskConnected(Boolean(ethereum.selectedAddress));\n      setConnecting(false);\n    }\n    getAccount();\n  }, []);\n\n  const change = (accounts: any[]) => {\n    setIsMetaMaskConnected(\n      accounts.length > 0 && Boolean(ethereum.selectedAddress)\n    );\n    if (!(accounts.length > 0 && Boolean(ethereum.selectedAddress))) {\n      setAddress(\"\");\n    }\n  };\n  ethereum.on(\"accountsChanged\", change);\n\n  const getAirdropInfos = async () => {\n    await init();\n    console.log(\n      \"üöÄ ~ file: App.tsx ~ line 126 ~ getAirdropInfos ~ isMetaMaskConnected\",\n      isMetaMaskConnected\n    );\n    if (isMetaMaskConnected) {\n      let walletAccounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setAddress(walletAccounts[0]);\n      let aWSBTokenBalance: ethers.BigNumber = await aWSBTokenContract.balanceOf(\n        walletAccounts[0]\n      );\n      let expiredTime: ethers.BigNumber = await aWSBAirDropContract.claimExpiredAt();\n      let claimBalance: ethers.BigNumber = await aWSBAirDropContract.claimWhitelist(\n        walletAccounts[0]\n      );\n      setExpiredTime(expiredTime.toNumber());\n      setaWSBTokenBalance(aWSBTokenBalance.div((1e18).toString()).toNumber());\n      setClaimBalance(claimBalance.div((1e18).toString()).toNumber());\n    }\n  };\n\n  useEffect(() => {\n    // Ëé∑ÂèñÂêàÁ∫¶Áõ∏ÂÖ≥‰ø°ÊÅØ\n    getAirdropInfos();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMetaMaskConnected]);\n\n  const connectWallet = async () => {\n    return await ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n  };\n\n  const claimButtonDisabled =\n    claiming || claimSuccess || Number(claimBalance) === 0;\n\n  const claim = async () => {\n    setClaiming(true);\n    try {\n      let process = await aWSBAirDropContract.claim();\n      try {\n        await process.wait();\n        setClaimSuccess(true);\n        getAirdropInfos();\n      } catch (error) {}\n      setClaiming(false);\n    } catch (error) {\n      setClaiming(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        {claiming ? (\n          <Claiming />\n        ) : (\n          <img\n            src={claimSuccess ? success : airdrop}\n            className=\"airdrop-img\"\n            alt=\"img\"\n          />\n        )}\n        <div className=\"airdrop\">\n          <div className=\"title\">\n            <span style={{ fontWeight: 900 }}>aWSB</span>\n            <span style={{ fontWeight: 300, marginLeft: \"10px\" }}>\n              AirDrop Event\n            </span>\n          </div>\n          <div className=\"address-info\">\n            <div className=\"key address-text\">\n              <div\n                className=\"connected\"\n                style={{\n                  background: address ? \"#52c41a\" : \"#E1694E\",\n                }}\n              ></div>\n              {connecting && \"Connecting...\"}\n              {address\n                ? formatAddress(String(address))\n                : errorNetWork\n                ? \"BSC Only !   Please Switch NetWork.\"\n                : connecting\n                ? \"\"\n                : \"Please Unlock Wallet.\"}\n            </div>\n            {address && (\n              <Fragment>\n                <div className=\"key token-balance\">\n                  Balance:{\" \"}\n                  <span style={{ fontWeight: 600, marginLeft: 10 }}>\n                    {aWSBTokenBalance} aWSB\n                  </span>\n                </div>\n                <div className=\"key claimed-balance\">\n                  To be claimed:{\" \"}\n                  <span style={{ fontWeight: 600, marginLeft: 10 }}>\n                    {claimBalance} aWSB\n                  </span>\n                </div>\n                <div className=\"key\">\n                  Claims Expired Time:\n                  <span style={{ fontWeight: 600, marginLeft: 10 }}>\n                    {dayjs(expiredTime * 1000).format(\"YYYY-MM-DD\")}\n                  </span>\n                </div>\n              </Fragment>\n            )}\n          </div>\n          {address ? (\n            <button\n              className=\"claim-button\"\n              onClick={claim}\n              disabled={claimButtonDisabled}\n              style={{\n                background: claimSuccess\n                  ? \"#52c41a\"\n                  : claimButtonDisabled\n                  ? \"#858da1\"\n                  : \"#ec615b\",\n              }}\n            >\n              {claiming ? <Loaing /> : claimSuccess ? \"Success!\" : \"Claim\"}\n            </button>\n          ) : errorNetWork ? (\n            <button\n              className=\"claim-button\"\n              disabled\n              style={{\n                background: \"#858da1\",\n              }}\n            >\n              Please Switch NetWork to BSC.\n            </button>\n          ) : (\n            <button\n              className=\"claim-button\"\n              style={{\n                background: \"#4B2CC8\",\n              }}\n              onClick={connectWallet}\n              disabled={connecting}\n            >\n              {connecting ? \"Connecting...\" : \"Unlock Wallet\"}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/airdrop-mini.0a53d039.png\";","export default __webpack_public_path__ + \"static/media/success-mini.9ad65050.png\";","export const BSC_MAINNET_ID = 56\nexport const BSC_TESTNET_ID = 97\nexport const HECO_MAINNET_ID = 128\nexport const HECO_TESTNET_ID = 256\n\n// HECO Testnet address\n// export const AWSB_TOKEN_ADDRESS = '0x6411afc3992a28c201510ae0949b48cfba1dd143'\n// export const AWSB_AIRDROP_CONTRACT_ADDRESS = '0x226dE5FC544EEAF06626D15C4239EdDF3a60E5e8'\n\nexport const AWSB_TOKEN_ADDRESS = '0xd926548c5fc268e96c27e385f9390ef79e798e29'\nexport const AWSB_AIRDROP_CONTRACT_ADDRESS = '0x3970aacdEE177049ca0C399805396B67f22A3B9d'","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}